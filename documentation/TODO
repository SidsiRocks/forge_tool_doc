- What primitives does base.frg 
- add signatures (cross check if it is there)
- add hashes ()
- no key cycles
- adding pairs
- adding timestamps


- RECENT TODO
- documentationf or transcriber, for changes to base.frg
- encrypted terms matching only when inverse key is known
- run file constraints uses sensible defaults, and some json file like interface for giving constraints
- visualizer updates

- visualizer not handling encypted terms correctly have to fix


- report should be ready by april 29 30 by latest official 28th


- FOR LATER
- what the predicates for a trace based property and equivalence basedd property,
- bettter interface/language for stating additional predicates
- for the otway rees protocol attack detection need agents shouldn't be able to distinguish between the following  {Na,Kab}Kas
  {Na,M,A,B}Kas have to somehow make agent take M,A,B as Kab.

- IMP NOTE
- The only thing ensuring that attacker can't generate the same nonces as the other agents is 
  a uniq-orig statement, can probably add separate constraint which says a nonce can never be genrated agian
  transcription for skeleton blocks of code is complete, still have to do proper checks (seems to be working with two_nonce.rkt have to check in more detail later)
- consider if want to add code for transcribing skeleton to transcribe.py, currently only in 
  transcribe_seq.py
- added code for checking if strand knows the encryption key, have to check this more (two nonce working, have to check if will give arbitrary ciphertext when key is not known)
Plan for handling encrypted terms properly,
we add constraint that enc in Ciphertext
and old constraint on keys and plaintext
only if the key is in the known values for that strand

inds[t2.data] = 0
some enc13 : elems[t2.data] | {
    elems[t2.data] = enc13
    (a.learned_times).(Timeslot - t.^next)
    getPUBK[arbitrary_two_nonce_resp.two_nonce_resp_b] = (enc13).encryptionKey
    inds[((enc13).plaintext)] = 0
    some atom14 : elems[((enc13).plaintext)] {
        (((enc13).plaintext))[0] = atom14
        atom14 = arbitrary_two_nonce_resp.two_nonce_resp_n2
    }
}

Doubts to ask about report:
1) any other sections/points to add 
2) anything to mention in further work, work done 