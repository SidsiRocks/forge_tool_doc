(with-current-buffer "*scratch*"
  (setq show-trailing-whitespace nil)
  (erase-buffer)
  (let*
      ((base_branch "main")
       (current_branch (substring (shell-command-to-string "git branch --show-current") 0 -1))
       (gca_hash (format "git merge-base \"%s\" \"%s\"" base_branch current_branch))
       (diff_command (format "git diff \"$(%s)\" \"%s\" | delta" gca_hash current_branch))
       (list_modified_files_command (format "git diff --name-status \"$(%s)\" \"%s\"" gca_hash current_branch))
       (modified_status_and_file_names
        (-map (lambda (indv-string) (string-split indv-string "[\t]+"))
              (string-split (shell-command-to-string list_modified_files_command) "[\n+]")
              ))
       )
    (insert "* Modified files\n")
    (dolist (status_and_file_name modified_files)
      (let*
          ((current_status (nth 0 status_and_file_name))
           (current_file_name (nth 1 status_and_file_name))
           (current_command
            (if (string-equal current_status "D")
                (format "git show \"$(%s):%s\" | bat --terminal-width 90 --language=%s" gca_hash current_file_name (file-name-extension current_file_name))
              (format "git diff $(%s) \"%s\" \"%s\" | delta --width 180" gca_hash current_branch current_file_name)))
           )
        (insert (format "** TODO %s %s\n" current_status current_file_name))
        (insert "#+BEGIN_SRC shell :results output\n")
        (insert "  " current_command "\n")
        (insert "#+END_SRC\n")))
    (org-mode)
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-execute-buffer)
      )
    (xterm-color-colorize-buffer)
    (org-shifttab)))
